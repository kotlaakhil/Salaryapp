BROKER SCHEMA A_projectlevel_subflow



	



PATH A_projectlevel_subflow;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE MAX_RETRY_COUNT EXTERNAL INTEGER 0;
DECLARE INIT_LOG4J_ERROR EXTERNAL CHARACTER '';
DECLARE RETRY_INTERVAL EXTERNAL INTEGER 0;


CREATE COMPUTE MODULE StewardBankZssSubFlow

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = INIT_LOG4J_ERROR;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR',INIT_LOG4J_ERROR) INTO rc;
		END IF;
		IF Environment.Variables.Counter IS NULL THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Environment.Variables.Counter is null maybe didnt capture tcp exceptionMsg') INTO rc;
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		CALL CopyEntireMessage();
		IF Environment.Variables.Retry.Counter IS NULL THEN
			SET Environment.Variables.Retry.Counter = 1;
		END IF;
		IF Environment.Variables.Retry.Counter <= MAX_RETRY_COUNT THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry count for connection:'||CAST(Environment.Variables.Retry.Counter AS CHARACTER)) INTO rc;
			DECLARE envRef REFERENCE TO Environment.Variables.Retry;
			IF envRef.Counter = 1 THEN
				SET envRef.Counter = envRef.Counter + 1;
			ELSE
				SET envRef.Counter = envRef.Counter + 1;
				CALL retryWithDelay(envRef.Counter);
				CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry the request after '||CAST(RETRY_INTERVAL AS CHARACTER)||' sec delay for current count:'||CAST(envRef.Counter AS CHARACTER)||'is Complete') INTO rc;
				RETURN TRUE;
			END IF;
		ELSE
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;

	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE retryWithDelay(IN count INTEGER) BEGIN
		IF count <= MAX_RETRY_COUNT AND count > 1 THEN
			DECLARE varDelay BOOLEAN SLEEP(RETRY_INTERVAL);
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE ZSS_CALL_SUBFLOW_Compute
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		IF domainName = 'DFDL' THEN
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
			DECLARE ccsidRef INTEGER InputRoot.Properties.CodedCharSetId;
			DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
			DECLARE data BLOB getBlobData(inDomainDataRef,encodeRef,ccsidRef);

			DECLARE logRef REFERENCE TO InputRoot.DFDL;
			DECLARE jsonRef REFERENCE TO OutputRoot;
			CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
			SET jsonRef = logRef;
			DECLARE tcpHeader BLOB ;
			DECLARE rc BOOLEAN FALSE;

			SET Environment.Variables.reqMsg = getPayLoad('JSON',jsonRef,encodeRef,ccsidRef);
			SET OutputRoot.JSON = NULL;
			CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
			IF ( rc = FALSE ) THEN
				SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
			END IF;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','..............Start logging ZSS sub flow...........') INTO rc;
			--JAVA procedure call to get 2 byte header
			SET tcpHeader = Get2ByteHeader(data);
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','===JSON Formatted Data Request====') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','Data with header') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG',CAST(tcpHeader AS CHARACTER)) INTO rc;
			DECLARE hexBits CHARACTER SUBSTRING(CAST(tcpHeader AS CHARACTER) FROM 3 FOR 4);
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','Hex Data of Header:'||hexBits) INTO rc;
			DECLARE dataWithHeader CHARACTER SUBSTRING(CAST(data AS CHARACTER) FROM 1 FOR 2) || hexBits || SUBSTRING(CAST(data AS CHARACTER) FROM 3);
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','Data with Header'||dataWithHeader) INTO rc;

			SET OutputRoot.Properties.MessageType = '{}:ISO8583WithHeader';
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
			PARSE(CAST(dataWithHeader AS BLOB) ENCODING encodeRef CCSID ccsidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583WithHeader');
			DECLARE outDomainRef REFERENCE TO OutputRoot.DFDL;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG','OutputRoot:') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ZSSSubFlowLogger', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL.ISO8583WithHeader),outDomainRef,encodeRef,ccsidRef)) INTO rc;
		END IF;
		RETURN TRUE;
	END;
END MODULE;


